import React from 'react';

interface GridProps {
  children: React.ReactNode;
  className?: string;
  columns?: number;
  subgrid?: boolean;
}

/**
 * The remarks below are needed for tailwind to generate
 * dynamic CSS classes generated byt this component.
 */

/**
 * Grid component to create a responsive grid layout.
 *
 * @component
 *
 * @example
 * <Grid columns={3} subgrid={true}>
 *   <div>Item 1</div>
 *   <div>Item 2</div>
 *   <div>Item 3</div>
 * </Grid>
 *
 * @remarks
 * The `columns` prop accepts values from 0 to 12. The corresponding CSS classes are:
 * - `md:grid-cols-none` for 0 columns
 * - `md:grid-cols-1` for 1 column
 * - `md:grid-cols-2` for 2 columns
 * - `md:grid-cols-3` for 3 columns
 * - `md:grid-cols-4` for 4 columns
 * - `md:grid-cols-5` for 5 columns
 * - `md:grid-cols-6` for 6 columns
 * - `md:grid-cols-7` for 7 columns
 * - `md:grid-cols-8` for 8 columns
 * - `md:grid-cols-9` for 9 columns
 * - `md:grid-cols-10` for 10 columns
 * - `md:grid-cols-11` for 11 columns
 * - `md:grid-cols-12` for 12 columns
 */
const Grid: React.FC<GridProps> = ({ children, className = '', columns = 1, subgrid = false }) => {
  const isValidColumn = (num: number) => num >= 0 && num <= 12;
  const gridColsClass = isValidColumn(columns) ? (columns === 0 ? 'md:grid-cols-none' : `md:grid-cols-${columns}`) : '';
  const subgridClass = subgrid ? 'grid-cols-subgrid' : '';

  return (
    <div className={`grid gap-x-8 gap-y-4 ${gridColsClass} ${subgridClass} ${className}`}>
      {children}
    </div>
  );
};

export default Grid;
